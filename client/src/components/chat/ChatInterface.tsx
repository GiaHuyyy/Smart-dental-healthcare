"use client";

import { useState, useRef, useEffect } from "react";
import Image from "next/image";
import { aiChatAPI, ChatMessage, DoctorSuggestion } from "@/utils/aiChat";
import { imageAnalysisAPI, ImageAnalysisResult } from "@/utils/imageAnalysis";

interface ChatInterfaceProps {
  type: "ai" | "doctor";
  doctorName?: string;
}

export default function ChatInterface({ type, doctorName }: ChatInterfaceProps) {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [suggestedDoctor, setSuggestedDoctor] = useState<DoctorSuggestion | null>(null);
  const [urgencyLevel, setUrgencyLevel] = useState<"high" | "medium" | "low">("low");
  const [showQuickSuggestions, setShowQuickSuggestions] = useState(true);
  const [isAnalyzingImage, setIsAnalyzingImage] = useState(false);
  const [analysisResult, setAnalysisResult] = useState<ImageAnalysisResult | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Initialize with welcome message
  useEffect(() => {
    if (type === "ai" && messages.length === 0) {
      setMessages([
        {
          role: "assistant",
          content:
            "Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Smart Dental Healthcare. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t∆∞ v·∫•n s∆° b·ªô v·ªÅ c√°c v·∫•n ƒë·ªÅ rƒÉng mi·ªáng. H√£y chia s·∫ª v·ªõi t√¥i tri·ªáu ch·ª©ng ho·∫∑c th·∫Øc m·∫Øc c·ªßa b·∫°n nh√©!",
          timestamp: new Date(),
        },
      ]);
    }
  }, [type, messages.length]);

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: ChatMessage = {
      role: "user",
      content: inputMessage,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      if (type === "ai") {
        // All messages go through AI - no more hardcoded analysis actions
        // Analyze urgency first
        const urgency = await aiChatAPI.analyzeUrgency(inputMessage);
        setUrgencyLevel(urgency);

        // Get AI response
        const response = await aiChatAPI.getDentalAdvice(inputMessage, messages);

        const aiMessage: ChatMessage = {
          role: "assistant",
          content: response.message,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, aiMessage]);

        // Set suggested doctor if available
        if (response.suggestedDoctor) {
          setSuggestedDoctor(response.suggestedDoctor);
        }

        // Add urgent message if needed
        if (urgency === "high") {
          const urgentMessage: ChatMessage = {
            role: "assistant",
            content:
              "‚ö†Ô∏è **KH·∫®N C·∫§P** ‚ö†Ô∏è\n\nT√¨nh tr·∫°ng c·ªßa b·∫°n c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c. Vui l√≤ng li√™n h·ªá ph√≤ng kh√°m ngay ho·∫∑c ƒë·∫øn c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t.\n\nüìû Hotline: 0123-456-789",
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, urgentMessage]);
        }
      } else {
        // For doctor chat - this would integrate with real-time chat system
        setTimeout(() => {
          const doctorMessage: ChatMessage = {
            role: "assistant",
            content: `${doctorName}: C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. T√¥i s·∫Ω xem x√©t v√† ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.`,
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, doctorMessage]);
          setIsLoading(false);
        }, 1000);
        return;
      }
    } catch (error) {
      console.error("Error sending message:", error);
      const errorMessage: ChatMessage = {
        role: "assistant",
        content: "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleQuickSuggestion = async (suggestion: string) => {
    // Check if it's image analysis suggestion
    if (suggestion.includes("Ph√¢n t√≠ch ·∫£nh")) {
      handleImageUploadClick();
      return;
    }

    // Extract text from suggestion (remove emoji)
    const cleanText = suggestion.replace(/^[^\w\s]+\s*/, "");

    const userMessage: ChatMessage = {
      role: "user",
      content: cleanText,
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    // setShowQuickSuggestions(false);
    setIsLoading(true);

    try {
      if (type === "ai") {
        // Analyze urgency first
        const urgency = await aiChatAPI.analyzeUrgency(cleanText);
        setUrgencyLevel(urgency);

        // Get AI response
        const response = await aiChatAPI.getDentalAdvice(cleanText, messages);

        const aiMessage: ChatMessage = {
          role: "assistant",
          content: response.message,
          timestamp: new Date(),
        };

        setMessages((prev) => [...prev, aiMessage]);

        // Set suggested doctor if available
        if (response.suggestedDoctor) {
          setSuggestedDoctor(response.suggestedDoctor);
        }

        // Add urgent message if needed
        if (urgency === "high") {
          const urgentMessage: ChatMessage = {
            role: "assistant",
            content:
              "‚ö†Ô∏è **KH·∫®N C·∫§P** ‚ö†Ô∏è\n\nT√¨nh tr·∫°ng c·ªßa b·∫°n c√≥ th·ªÉ c·∫ßn ƒë∆∞·ª£c x·ª≠ l√Ω ngay l·∫≠p t·ª©c. Vui l√≤ng li√™n h·ªá ph√≤ng kh√°m ngay ho·∫∑c ƒë·∫øn c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t.\n\nüìû Hotline: 0123-456-789",
            timestamp: new Date(),
          };
          setMessages((prev) => [...prev, urgentMessage]);
        }
      }
    } catch (error) {
      console.error("Error with quick suggestion:", error);
      const errorMessage: ChatMessage = {
        role: "assistant",
        content: "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    // Validate file type
    if (!file.type.startsWith("image/")) {
      alert("Vui l√≤ng ch·ªçn file ·∫£nh");
      return;
    }

    // Validate file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
      alert("File qu√° l·ªõn. Vui l√≤ng ch·ªçn ·∫£nh nh·ªè h∆°n 5MB");
      return;
    }

    setIsAnalyzingImage(true);
    setIsLoading(true);

    // Create image preview URL
    const imageUrl = URL.createObjectURL(file);

    // Add user message showing uploaded image with preview
    const userMessage: ChatMessage = {
      role: "user",
      content: `üñºÔ∏è ƒê√£ t·∫£i l√™n ·∫£nh: ${file.name}`,
      timestamp: new Date(),
      imageUrl: imageUrl, // Add image URL to message
    };
    setMessages((prev) => [...prev, userMessage]);

    try {
      // Call image analysis API
      const analysisResponse = await imageAnalysisAPI.uploadAndAnalyze(file);

      if (!analysisResponse.success || !analysisResponse.data) {
        throw new Error(analysisResponse.error || "L·ªói ph√¢n t√≠ch ·∫£nh");
      }

      const result = analysisResponse.data;
      setAnalysisResult(result);

      // Create a formatted analysis message that includes rich content with better styling
      let analysisMessage = `üîç **K·∫æT QU·∫¢ PH√ÇN T√çCH ·∫¢NH**\n${"‚ïê".repeat(50)}\n\n`;

      // Add rich content to the message if available
      if (result.richContent) {
        // Add diagnosis with styling
        if (result.richContent.analysis) {
          analysisMessage += `üìã **CH·∫®N ƒêO√ÅN:**\n`;
          analysisMessage += `${result.richContent.analysis}\n\n`;
        }

        // Add sections with better formatting
        if (result.richContent.sections && result.richContent.sections.length > 0) {
          analysisMessage += `üìä **CHI TI·∫æT PH√ÇN T√çCH:**\n`;
          result.richContent.sections.forEach((section, index) => {
            if (section.heading && section.text) {
              analysisMessage += `\n${index + 1}. **${section.heading}**\n`;
              analysisMessage += `   ${section.text}\n`;
            }
            if (section.bullets && section.bullets.length > 0) {
              section.bullets.forEach((bullet) => {
                analysisMessage += `   ‚Ä¢ ${bullet}\n`;
              });
            }
          });
          analysisMessage += "\n";
        }

        // Add recommendations
        if (result.richContent.recommendations) {
          analysisMessage += "**ÔøΩ Khuy·∫øn ngh·ªã:**\n";
          result.richContent.recommendations.forEach((rec) => {
            analysisMessage += `‚Ä¢ ${rec}\n`;
          });
          analysisMessage += "\n";
        }

        // Show action buttons only when we have meaningful analysis results
        analysisMessage += `üîß **C√ÅC H√ÄNH ƒê·ªòNG TI·∫æP THEO:**\n`;
        analysisMessage += `S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t∆∞∆°ng t√°c`;
      } else {
        // If no rich content, show basic message from API
        analysisMessage += result.message || "ƒê√£ ho√†n th√†nh ph√¢n t√≠ch ·∫£nh.";
      }

      const aiMessage: ChatMessage = {
        role: "assistant",
        content: analysisMessage,
        timestamp: new Date(),
        // Only show action buttons if we have rich content from AI analysis
        actionButtons:
          result.richContent &&
          (result.richContent.analysis || result.richContent.recommendations || result.richContent.sections)
            ? ["Gi·∫£i th√≠ch th√™m", "ƒê·∫∑t l·ªãch kh√°m", "H∆∞·ªõng d·∫´n chƒÉm s√≥c", "G·ª£i √Ω b√°c sƒ©", "K·∫øt th√∫c"]
            : undefined,
      };

      setMessages((prev) => [...prev, aiMessage]);

      // Set suggested doctor if available
      if (result.suggestedDoctor) {
        setSuggestedDoctor(result.suggestedDoctor);
      }

      // Auto-hide quick suggestions after image upload
    //   setShowQuickSuggestions(false);
    } catch (error) {
      console.error("Error analyzing image:", error);
      const errorMessage: ChatMessage = {
        role: "assistant",
        content: `‚ùå L·ªói ph√¢n t√≠ch ·∫£nh: ${
          error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"
        }. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá b√°c sƒ© tr·ª±c ti·∫øp.`,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsAnalyzingImage(false);
      setIsLoading(false);
      // Reset file input
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    }
  };

  const handleImageUploadClick = () => {
    fileInputRef.current?.click();
  };

  const quickSuggestions = [
    "üòñ T√¥i b·ªã ƒëau rƒÉng d·ªØ d·ªôi",
    "ü¶∑ RƒÉng kh√¥n m·ªçc ƒëau",
    "‚ú® T∆∞ v·∫•n t·∫©y tr·∫Øng rƒÉng",
    "üîß H·ªèi v·ªÅ ni·ªÅng rƒÉng",
    "ü©∏ N∆∞·ªõu b·ªã ch·∫£y m√°u",
    "üíä T∆∞ v·∫•n chƒÉm s√≥c rƒÉng mi·ªáng",
    "üì∏ Ph√¢n t√≠ch ·∫£nh X-quang/rƒÉng",
  ];

  const getUrgencyBadge = () => {
    const colors = {
      high: "bg-red-100 text-red-800 border-red-300",
      medium: "bg-yellow-100 text-yellow-800 border-yellow-300",
      low: "bg-green-100 text-green-800 border-green-300",
    };

    const labels = {
      high: "Kh·∫©n c·∫•p",
      medium: "Trung b√¨nh",
      low: "B√¨nh th∆∞·ªùng",
    };

    return (
      <div
        className={`inline-flex items-center px-2 py-1 text-xs font-medium border rounded-full ${colors[urgencyLevel]}`}
      >
        {labels[urgencyLevel]}
      </div>
    );
  };

  // Handle action button clicks
  const handleAnalysisActionClick = async (action: string) => {
    // Handle "K·∫øt th√∫c" action specially - show confirmation then clear all messages
    if (action.toLowerCase().includes("k·∫øt th√∫c")) {
      // Add user message first
      const userMessage: ChatMessage = {
        role: "user",
        content: action,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, userMessage]);

      // Add goodbye message
      const goodbyeMessage: ChatMessage = {
        role: "assistant",
        content:
          "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• t∆∞ v·∫•n nha khoa! üôè\n\nCh√∫c b·∫°n c√≥ rƒÉng mi·ªáng kh·ªèe m·∫°nh! üíä\n\nChat s·∫Ω ƒë∆∞·ª£c x√≥a sau 3 gi√¢y...",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, goodbyeMessage]);

      // Clear everything after 3 seconds
      setTimeout(() => {
        setMessages([]);
        setAnalysisResult(null);
        setShowQuickSuggestions(true);
        setSuggestedDoctor(null);
        setUrgencyLevel("low");
      }, 3000);

      return;
    }

    // Add user message for the action
    const userMessage: ChatMessage = {
      role: "user",
      content: action,
      timestamp: new Date(),
    };
    setMessages((prev) => [...prev, userMessage]);

    setIsLoading(true);

    try {
      // For analysis-related actions, use AI to generate intelligent responses
      let promptMessage = "";

      // Include analysis context if available
      const analysisContext = analysisResult?.richContent
        ? `D·ª±a tr√™n k·∫øt qu·∫£ ph√¢n t√≠ch ·∫£nh nha khoa v·ªõi ch·∫©n ƒëo√°n: "${analysisResult.richContent.analysis}". `
        : "";

      if (action.toLowerCase().includes("gi·∫£i th√≠ch th√™m")) {
        promptMessage = `${analysisContext}T√¥i mu·ªën hi·ªÉu r√µ h∆°n v·ªÅ k·∫øt qu·∫£ ph√¢n t√≠ch ·∫£nh nha khoa. H√£y gi·∫£i th√≠ch chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng rƒÉng mi·ªáng, nguy√™n nh√¢n c√≥ th·ªÉ, v√† m·ª©c ƒë·ªô nghi√™m tr·ªçng.`;
      } else if (action.toLowerCase().includes("ƒë·∫∑t l·ªãch kh√°m")) {
        promptMessage = `${analysisContext}T√¥i mu·ªën ƒë·∫∑t l·ªãch kh√°m nha khoa. H√£y t∆∞ v·∫•n lo·∫°i h√¨nh ƒëi·ªÅu tr·ªã c·∫ßn thi·∫øt, ƒë·ªô ∆∞u ti√™n, v√† h∆∞·ªõng d·∫´n quy tr√¨nh ƒë·∫∑t l·ªãch kh√°m.`;
      } else if (action.toLowerCase().includes("h∆∞·ªõng d·∫´n chƒÉm s√≥c")) {
        promptMessage = `${analysisContext}T√¥i mu·ªën ƒë∆∞·ª£c h∆∞·ªõng d·∫´n c√°ch chƒÉm s√≥c rƒÉng mi·ªáng t·∫°i nh√† ƒë·ªÉ c·∫£i thi·ªán t√¨nh tr·∫°ng hi·ªán t·∫°i. H√£y ƒë∆∞a ra l·ªùi khuy√™n c·ª• th·ªÉ v√† th·ª±c t·∫ø.`;
      } else if (action.toLowerCase().includes("g·ª£i √Ω b√°c sƒ©")) {
        promptMessage = `${analysisContext}T√¥i mu·ªën ƒë∆∞·ª£c g·ª£i √Ω b√°c sƒ© nha khoa chuy√™n khoa ph√π h·ª£p v·ªõi t√¨nh tr·∫°ng c·ªßa m√¨nh. H√£y t∆∞ v·∫•n lo·∫°i chuy√™n khoa c·∫ßn thi·∫øt v√† ti√™u ch√≠ ch·ªçn b√°c sƒ©.`;
      } else {
        promptMessage = action; // Fallback to the action text itself
      }

      // Get AI response
      const aiResponse = await aiChatAPI.getDentalAdvice(promptMessage, messages);

      const aiMessage: ChatMessage = {
        role: "assistant",
        content: aiResponse.message,
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, aiMessage]);

      // Update suggested doctor if provided
      if (aiResponse.suggestedDoctor) {
        setSuggestedDoctor(aiResponse.suggestedDoctor);
      }
    } catch (error) {
      console.error("Error with analysis action:", error);
      const errorMessage: ChatMessage = {
        role: "assistant",
        content: "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Get icon for each button
  const getButtonIcon = (buttonText: string) => {
    if (buttonText.includes("Gi·∫£i th√≠ch")) return "üí°";
    if (buttonText.includes("ƒê·∫∑t l·ªãch")) return "üìÖ";
    if (buttonText.includes("H∆∞·ªõng d·∫´n")) return "üè†";
    if (buttonText.includes("G·ª£i √Ω b√°c sƒ©")) return "üë®‚Äç‚öïÔ∏è";
    if (buttonText.includes("K·∫øt th√∫c")) return "‚úÖ";
    return "üîß";
  };

  return (
    <div className="flex-1 flex flex-col h-full max-h-full">
      {/* Chat Header */}
      <div className="p-4 border-b border-gray-200 bg-white flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div
              className={`w-10 h-10 rounded-full flex items-center justify-center mr-3 ${
                type === "ai" ? "bg-blue-500" : "bg-green-500"
              }`}
            >
              <span className="text-white text-sm">{type === "ai" ? "ü§ñ" : "BS"}</span>
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">{type === "ai" ? "AI T∆∞ v·∫•n" : doctorName}</h3>
              <p className="text-sm text-gray-600">
                {type === "ai" ? (
                  <>
                    <span className="inline-block w-2 h-2 bg-green-500 rounded-full mr-1"></span>
                    T∆∞ v·∫•n s∆° b·ªô v·ªÅ nha khoa
                  </>
                ) : (
                  <>
                    <span className="inline-block w-2 h-2 bg-green-500 rounded-full mr-1"></span>
                    ƒêang ho·∫°t ƒë·ªông
                  </>
                )}
              </p>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex items-center space-x-2">
            {type === "ai" && messages.length > 2 && getUrgencyBadge()}

            {/* Common action buttons for both AI and Doctor */}
            <button className="px-3 py-1 bg-blue-100 text-blue-700 rounded-md text-sm hover:bg-blue-200 flex items-center">
              üìû <span className="ml-1">G·ªçi ƒëi·ªán</span>
            </button>
            <button className="px-3 py-1 bg-green-100 text-green-700 rounded-md text-sm hover:bg-green-200 flex items-center">
              üìÖ <span className="ml-1">ƒê·∫∑t l·ªãch</span>
            </button>

            {type === "ai" && (
              <span className="px-3 py-1 bg-blue-100 text-blue-700 rounded-full text-xs">Mi·ªÖn ph√≠</span>
            )}
          </div>
        </div>
      </div>

      {/* Messages - Scrollable Area */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50 min-h-0">
        {messages.map((message, index) => (
          <div key={index} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
            <div
              className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                message.role === "user"
                  ? "bg-blue-500 text-white"
                  : message.actionButtons && message.actionButtons.length > 0
                  ? "bg-white text-gray-900 border border-gray-200 shadow-lg"
                  : "bg-gray-100 text-gray-900"
              }`}
            >
              {/* Show image if available */}
              {message.imageUrl && (
                <div className="mb-2">
                  <Image
                    src={message.imageUrl}
                    alt="Uploaded image"
                    width={200}
                    height={200}
                    className="max-w-full h-auto rounded-lg border object-cover"
                    style={{ maxHeight: "200px" }}
                  />
                </div>
              )}
              <div className="whitespace-pre-wrap">{message.content}</div>

              {/* Show action buttons if available */}
              {message.actionButtons && message.actionButtons.length > 0 && (
                <div className="mt-3 flex flex-wrap gap-2">
                  {message.actionButtons.map((buttonText, buttonIndex) => (
                    <button
                      key={buttonIndex}
                      onClick={() => handleAnalysisActionClick(buttonText)}
                      className="px-3 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg text-sm font-medium hover:from-blue-600 hover:to-blue-700 transition-all duration-200 flex items-center shadow-sm hover:shadow-md transform hover:scale-105"
                    >
                      <span className="mr-1">{getButtonIcon(buttonText)}</span>
                      {buttonText}
                    </button>
                  ))}
                </div>
              )}

              <div className={`text-xs mt-1 ${message.role === "user" ? "text-blue-100" : "text-gray-500"}`}>
                {message.timestamp instanceof Date
                  ? message.timestamp.toLocaleTimeString()
                  : new Date(message.timestamp).toLocaleTimeString()}
              </div>
            </div>
          </div>
        ))}

        {isLoading && (
          <div className="flex justify-start">
            <div className="bg-gray-100 px-4 py-2 rounded-lg">
              <div className="flex items-center space-x-2">
                <div className="flex items-center space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div
                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.1s" }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                </div>
                <span className="text-sm text-gray-600">
                  {isAnalyzingImage ? "ƒêang ph√¢n t√≠ch ·∫£nh..." : "ƒêang so·∫°n tin nh·∫Øn..."}
                </span>
              </div>
            </div>
          </div>
        )}

        {/* Quick Suggestions */}
        {type === "ai" && showQuickSuggestions && (
          <div className="flex flex-wrap gap-2">
            {quickSuggestions.map((suggestion, index) => (
              <button
                key={index}
                onClick={() => handleQuickSuggestion(suggestion)}
                className="px-3 py-2 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 text-sm transition-colors"
              >
                {suggestion}
              </button>
            ))}
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Doctor Suggestion */}
      {type === "ai" && suggestedDoctor && (
        <div className="p-4 bg-blue-50 border-t border-blue-200">
          <div className="flex items-start">
            <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center mr-3">
              <span className="text-white text-xs">BS</span>
            </div>
            <div className="flex-1">
              <h4 className="font-medium text-blue-900">B√°c sƒ© ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t</h4>
              <p className="text-sm text-blue-800 font-medium">{suggestedDoctor.fullName}</p>
              <p className="text-sm text-blue-700">{suggestedDoctor.specialty}</p>
              <div className="flex space-x-2">
                <button className="mt-2 text-sm bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600">
                  Li√™n h·ªá
                </button>
                <button className="mt-2 text-sm bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600">
                  Xem h·ªì s∆°
                </button>
                <button className="mt-2 text-sm bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-600">
                  ƒê·∫∑t l·ªãch kh√°m
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Input */}
      <div className="p-4 border-t border-gray-200 bg-white flex-shrink-0">
        <div className="flex space-x-3">
          <div className="flex-1">
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={type === "ai" ? "M√¥ t·∫£ tri·ªáu ch·ª©ng c·ªßa b·∫°n..." : "Nh·∫≠p tin nh·∫Øn..."}
              className="w-full p-3 border border-gray-200 rounded-lg resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              disabled={isLoading}
            />
          </div>
          <div className="flex flex-col space-y-2">
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="p-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              ‚û§
            </button>
            <button
              onClick={handleImageUploadClick}
              disabled={isLoading || isAnalyzingImage}
              className="p-3 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              üì∑
            </button>
          </div>
        </div>

        <input type="file" ref={fileInputRef} onChange={handleFileUpload} accept="image/*" className="hidden" />

        {/* Additional actions for doctor chat */}
        {type === "doctor" && (
          <div className="flex flex-wrap gap-2 mt-3">
            <button className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200">
              C·∫ßn ch·ª•p X-quang
            </button>
            <button className="px-3 py-1 bg-gray-100 text-gray-700 rounded-full text-sm hover:bg-gray-200">
              K√™ ƒë∆°n thu·ªëc
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

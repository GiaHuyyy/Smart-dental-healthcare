const { v2: cloudinary } = require('cloudinary');
require('dotenv').config();

console.log('üîç Ki·ªÉm tra c·∫•u h√¨nh Cloudinary...\n');

// Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng
const cloudName = process.env.CLOUDINARY_CLOUD_NAME;
const apiKey = process.env.CLOUDINARY_API_KEY;
const apiSecret = process.env.CLOUDINARY_API_SECRET;

console.log('üìã Th√¥ng tin c·∫•u h√¨nh:');
console.log(`   Cloud Name: ${cloudName ? '‚úÖ ƒê√£ c·∫•u h√¨nh' : '‚ùå Ch∆∞a c·∫•u h√¨nh'}`);
console.log(`   API Key: ${apiKey ? '‚úÖ ƒê√£ c·∫•u h√¨nh' : '‚ùå Ch∆∞a c·∫•u h√¨nh'}`);
console.log(`   API Secret: ${apiSecret ? '‚úÖ ƒê√£ c·∫•u h√¨nh' : '‚ùå Ch∆∞a c·∫•u h√¨nh'}`);

if (!cloudName || !apiKey || !apiSecret) {
  console.log('\n‚ùå Thi·∫øu th√¥ng tin c·∫•u h√¨nh Cloudinary!');
  console.log('üí° Vui l√≤ng:');
  console.log('   1. T·∫°o t√†i kho·∫£n t·∫°i https://cloudinary.com');
  console.log('   2. L·∫•y th√¥ng tin t·ª´ Dashboard');
  console.log('   3. C·∫≠p nh·∫≠t file .env');
  console.log('   4. Ch·∫°y l·∫°i script n√†y');
  process.exit(1);
}

// Hi·ªÉn th·ªã gi√° tr·ªã th·ª±c t·∫ø (che gi·∫•u m·ªôt ph·∫ßn)
console.log('\nüîç Gi√° tr·ªã c·∫•u h√¨nh:');
console.log(`   Cloud Name: "${cloudName}"`);
console.log(`   API Key: ${apiKey.substring(0, 8)}...${apiKey.substring(apiKey.length - 4)}`);
console.log(`   API Secret: ${apiSecret.substring(0, 8)}...${apiSecret.substring(apiSecret.length - 4)}`);

// C·∫•u h√¨nh Cloudinary
cloudinary.config({
  cloud_name: cloudName,
  api_key: apiKey,
  api_secret: apiSecret,
});

// Ki·ªÉm tra k·∫øt n·ªëi
console.log('\nüîó ƒêang ki·ªÉm tra k·∫øt n·ªëi...');

// Th·ª≠ ping tr∆∞·ªõc
cloudinary.api.ping()
  .then(result => {
    console.log('‚úÖ Ping th√†nh c√¥ng!');
    console.log(`   Status: ${result.status}`);
    
    // Th·ª≠ l·∫•y th√¥ng tin t√†i kho·∫£n
    return cloudinary.api.account();
  })
  .then(account => {
    console.log('\nüìä Th√¥ng tin t√†i kho·∫£n:');
    console.log(`   Cloud Name: ${account.cloud_name}`);
    console.log(`   Plan: ${account.plan}`);
    console.log(`   Credits: ${account.credits?.used || 0}/${account.credits?.limit || 'unlimited'}`);
    console.log(`   Media Library: ${account.media_library?.limit || 'unlimited'} items`);
    
    console.log('\nüéâ C·∫•u h√¨nh Cloudinary ho√†n t·∫•t!');
    console.log('üí° B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng upload ·∫£nh.');
  })
  .catch(error => {
    console.log('\n‚ùå L·ªói k·∫øt n·ªëi Cloudinary:');
    
    // Hi·ªÉn th·ªã l·ªói chi ti·∫øt
    if (error && typeof error === 'object') {
      console.log(`   Error Message: ${error.message || 'No message'}`);
      console.log(`   Error Name: ${error.name || 'No name'}`);
      console.log(`   Error Code: ${error.http_code || 'No code'}`);
      console.log(`   Error Type: ${error.constructor.name}`);
      
      // Hi·ªÉn th·ªã to√†n b·ªô object n·∫øu c√≥
      if (Object.keys(error).length > 0) {
        console.log('   Full Error Object:');
        Object.keys(error).forEach(key => {
          console.log(`     ${key}: ${error[key]}`);
        });
      }
    } else {
      console.log(`   Error: ${error}`);
    }
    
    // Ph√¢n t√≠ch l·ªói c·ª• th·ªÉ
    if (error && error.message) {
      if (error.message.includes('Invalid cloud_name')) {
        console.log('\nüí° L·ªói Cloud Name:');
        console.log('   - Cloud name kh√¥ng ƒë√∫ng ho·∫∑c kh√¥ng t·ªìn t·∫°i');
        console.log('   - Vui l√≤ng ki·ªÉm tra l·∫°i trong Cloudinary Dashboard');
        console.log(`   - Cloud name hi·ªán t·∫°i: "${cloudName}"`);
        console.log('   - Cloud name th∆∞·ªùng ng·∫Øn g·ªçn, v√≠ d·ª•: "mycloud", "demo123"');
      } else if (error.message.includes('Invalid API key')) {
        console.log('\nüí° L·ªói API Key:');
        console.log('   - API key kh√¥ng ƒë√∫ng');
        console.log('   - API key c√≥ th·ªÉ ƒë√£ b·ªã v√¥ hi·ªáu h√≥a');
        console.log('   - Vui l√≤ng t·∫°o API key m·ªõi trong Dashboard');
      } else if (error.message.includes('Invalid API secret')) {
        console.log('\nüí° L·ªói API Secret:');
        console.log('   - API secret kh√¥ng ƒë√∫ng');
        console.log('   - API secret c√≥ th·ªÉ ƒë√£ b·ªã thay ƒë·ªïi');
        console.log('   - Vui l√≤ng reset API secret trong Dashboard');
      } else if (error.http_code === 401) {
        console.log('\nüí° L·ªói x√°c th·ª±c (401):');
        console.log('   - Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng ch√≠nh x√°c');
        console.log('   - T√†i kho·∫£n c√≥ th·ªÉ b·ªã kh√≥a');
        console.log('   - Vui l√≤ng ki·ªÉm tra l·∫°i t·∫•t c·∫£ th√¥ng tin');
      }
    }
    
    // Th√¥ng tin debug
    console.log('\nüîç Th√¥ng tin debug:');
    console.log(`   Cloud Name length: ${cloudName.length}`);
    console.log(`   API Key length: ${apiKey.length}`);
    console.log(`   API Secret length: ${apiSecret.length}`);
    console.log(`   Cloud Name contains dash: ${cloudName.includes('-')}`);
    console.log(`   Cloud Name contains underscore: ${cloudName.includes('_')}`);
    
    // G·ª£i √Ω s·ª≠a l·ªói
    console.log('\nüí° G·ª£i √Ω s·ª≠a l·ªói:');
    console.log('   1. ƒêƒÉng nh·∫≠p v√†o https://cloudinary.com/console');
    console.log('   2. Ki·ªÉm tra Cloud Name trong Dashboard');
    console.log('   3. T·∫°o API Key m·ªõi n·∫øu c·∫ßn');
    console.log('   4. C·∫≠p nh·∫≠t file .env v·ªõi th√¥ng tin ch√≠nh x√°c');
    console.log('   5. Restart server sau khi c·∫≠p nh·∫≠t');
    
    process.exit(1);
  });

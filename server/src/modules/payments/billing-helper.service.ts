import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Payment } from './schemas/payment.schemas';
import { User, UserDocument } from '../users/schemas/user.schemas';

export const RESERVATION_FEE_AMOUNT = 100000; // 100,000 VND

@Injectable()
export class BillingHelperService {
  private readonly logger = new Logger(BillingHelperService.name);

  constructor(
    @InjectModel(Payment.name)
    private paymentModel: Model<Payment>,
    @InjectModel(User.name)
    private userModel: Model<UserDocument>,
  ) {}

  /**
   * T·∫°o bill ph√≠ ƒë·∫∑t ch·ªó cho b√°c sƒ© (b√°c sƒ© nh·∫≠n ti·ªÅn)
   */
  async createReservationFeeForDoctor(
    doctorId: string,
    patientId: string,
    appointmentId: string,
  ): Promise<Payment> {
    return this.paymentModel.create({
      doctorId,
      patientId,
      amount: RESERVATION_FEE_AMOUNT,
      status: 'completed',
      type: 'appointment',
      billType: 'reservation_fee',
      refId: appointmentId,
      refModel: 'Appointment',
    });
  }

  /**
   * T·∫°o bill ph√≠ ƒë·∫∑t ch·ªó cho b·ªánh nh√¢n (b·ªánh nh√¢n b·ªã t√≠nh ti·ªÅn)
   */
  async chargeReservationFeeFromPatient(
    patientId: string,
    doctorId: string,
    appointmentId: string,
  ): Promise<Payment> {
    return this.paymentModel.create({
      patientId,
      doctorId,
      amount: -RESERVATION_FEE_AMOUNT, // S·ªë √¢m = b·ªánh nh√¢n b·ªã tr·ª´ ti·ªÅn
      status: 'completed',
      type: 'appointment',
      billType: 'cancellation_charge',
      refId: appointmentId,
      refModel: 'Appointment',
    });
  }

  /**
   * Ho√†n ti·ªÅn ph√≠ kh√°m cho b·ªánh nh√¢n
   */
  async refundConsultationFee(
    originalPaymentId: string,
    originalAmount: number,
    patientId: string,
    doctorId: string,
    appointmentId: string,
  ): Promise<Payment> {
    // Ensure refund amount is always positive (patient receives money back)
    const refundAmount = Math.abs(originalAmount);

    this.logger.log(
      `üí∞ Creating refund bill: patientId=${patientId}, amount=${refundAmount}`,
    );

    // Create refund bill
    const refundBill = await this.paymentModel.create({
      patientId,
      doctorId,
      amount: refundAmount, // Always positive - patient receives money
      status: 'completed',
      type: 'appointment',
      billType: 'refund',
      refundStatus: 'completed',
      relatedPaymentId: originalPaymentId,
      refId: appointmentId,
      refModel: 'Appointment',
    });

    // Add money back to patient's wallet
    try {
      const updatedUser = await this.userModel.findByIdAndUpdate(
        patientId,
        { $inc: { walletBalance: refundAmount } },
        { new: true },
      );

      this.logger.log(
        `‚úÖ Refund completed: Added ${refundAmount} to patient wallet. New balance: ${updatedUser?.walletBalance}`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå Failed to update patient wallet for refund:`,
        error,
      );
      // Don't throw - bill is created, wallet update can be retried
    }

    return refundBill;
  }

  /**
   * T·∫°o bill pending ph√≠ gi·ªØ ch·ªó cho b·ªánh nh√¢n (ch∆∞a thanh to√°n)
   * S·ª≠ d·ª•ng khi b√°c sƒ© h·ªßy do b·ªánh nh√¢n ƒë·∫øn mu·ªôn ho·∫∑c b·ªánh nh√¢n h·ªßy/ƒë·ªïi l·ªãch c·∫≠n gi·ªù
   */
  async createPendingReservationCharge(
    patientId: string,
    doctorId: string,
    appointmentId: string,
  ): Promise<Payment> {
    return this.paymentModel.create({
      patientId,
      doctorId,
      amount: RESERVATION_FEE_AMOUNT, // S·ªë d∆∞∆°ng - ch∆∞a tr·ª´ ti·ªÅn
      status: 'pending', // Ch·ªù thanh to√°n
      paymentMethod: 'pending',
      type: 'appointment',
      billType: 'cancellation_charge', // D√πng enum c√≥ s·∫µn
      refId: appointmentId,
      refModel: 'Appointment',
      description: `Ph√≠ gi·ªØ ch·ªó - L·ªãch h·∫πn #${appointmentId}`,
    });
  }

  /**
   * Ki·ªÉm tra b·ªánh nh√¢n ƒë√£ thanh to√°n ph√≠ kh√°m ch∆∞a
   */
  async hasExistingPayment(appointmentId: string): Promise<boolean> {
    const payment = await this.paymentModel.findOne({
      refId: appointmentId,
      refModel: 'Appointment',
      $or: [
        { billType: 'consultation_fee' }, // New format
        { type: 'appointment', billType: { $exists: false } }, // Old format (kh√¥ng c√≥ billType)
      ],
      status: 'completed',
    });
    return !!payment;
  }

  /**
   * L·∫•y payment g·ªëc (ph√≠ kh√°m) ƒë·ªÉ ho√†n ti·ªÅn
   */
  async getOriginalPayment(appointmentId: string): Promise<Payment | null> {
    return this.paymentModel.findOne({
      refId: appointmentId,
      refModel: 'Appointment',
      $or: [
        { billType: 'consultation_fee' }, // New format
        { type: 'appointment', billType: { $exists: false } }, // Old format
      ],
      status: 'completed',
    });
  }
}
